/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ButtonGamefinder {
        "disabled": boolean;
        "icon": string;
        "size": string;
        "variant": string;
    }
    interface CheckboxGamefinder {
    }
    interface ChipGamefinder {
        "color": string;
        "variant": string;
    }
    interface DropdownItemGamefinder {
        "color": string;
        "disabled": boolean;
        "helptext": string;
        "icon": string;
        "label": string;
        "placeholder": string;
        "state": string;
        "value": string;
    }
    interface DropdownListGamefinder {
        "color": string;
        "disabled": boolean;
        "helptext": string;
        "icon": string;
        "label": string;
        "placeholder": string;
        "state": string;
        "value": string;
    }
    interface ModalGamefinder {
        "close": () => Promise<void>;
        "open": () => Promise<void>;
        "titleModal": string;
        "variant": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface TextfieldGamefinder {
        "color": string;
        "disabled": boolean;
        "helptext": string;
        "icon": string;
        "label": string;
        "placeholder": string;
        "state": string;
        "value": string;
    }
}
export interface ButtonGamefinderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLButtonGamefinderElement;
}
export interface CheckboxGamefinderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCheckboxGamefinderElement;
}
export interface ChipGamefinderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChipGamefinderElement;
}
export interface DropdownItemGamefinderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDropdownItemGamefinderElement;
}
export interface DropdownListGamefinderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDropdownListGamefinderElement;
}
export interface ModalGamefinderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLModalGamefinderElement;
}
export interface TextfieldGamefinderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTextfieldGamefinderElement;
}
declare global {
    interface HTMLButtonGamefinderElement extends Components.ButtonGamefinder, HTMLStencilElement {
    }
    var HTMLButtonGamefinderElement: {
        prototype: HTMLButtonGamefinderElement;
        new (): HTMLButtonGamefinderElement;
    };
    interface HTMLCheckboxGamefinderElement extends Components.CheckboxGamefinder, HTMLStencilElement {
    }
    var HTMLCheckboxGamefinderElement: {
        prototype: HTMLCheckboxGamefinderElement;
        new (): HTMLCheckboxGamefinderElement;
    };
    interface HTMLChipGamefinderElement extends Components.ChipGamefinder, HTMLStencilElement {
    }
    var HTMLChipGamefinderElement: {
        prototype: HTMLChipGamefinderElement;
        new (): HTMLChipGamefinderElement;
    };
    interface HTMLDropdownItemGamefinderElement extends Components.DropdownItemGamefinder, HTMLStencilElement {
    }
    var HTMLDropdownItemGamefinderElement: {
        prototype: HTMLDropdownItemGamefinderElement;
        new (): HTMLDropdownItemGamefinderElement;
    };
    interface HTMLDropdownListGamefinderElement extends Components.DropdownListGamefinder, HTMLStencilElement {
    }
    var HTMLDropdownListGamefinderElement: {
        prototype: HTMLDropdownListGamefinderElement;
        new (): HTMLDropdownListGamefinderElement;
    };
    interface HTMLModalGamefinderElement extends Components.ModalGamefinder, HTMLStencilElement {
    }
    var HTMLModalGamefinderElement: {
        prototype: HTMLModalGamefinderElement;
        new (): HTMLModalGamefinderElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLTextfieldGamefinderElement extends Components.TextfieldGamefinder, HTMLStencilElement {
    }
    var HTMLTextfieldGamefinderElement: {
        prototype: HTMLTextfieldGamefinderElement;
        new (): HTMLTextfieldGamefinderElement;
    };
    interface HTMLElementTagNameMap {
        "button-gamefinder": HTMLButtonGamefinderElement;
        "checkbox-gamefinder": HTMLCheckboxGamefinderElement;
        "chip-gamefinder": HTMLChipGamefinderElement;
        "dropdown-item-gamefinder": HTMLDropdownItemGamefinderElement;
        "dropdown-list-gamefinder": HTMLDropdownListGamefinderElement;
        "modal-gamefinder": HTMLModalGamefinderElement;
        "my-component": HTMLMyComponentElement;
        "textfield-gamefinder": HTMLTextfieldGamefinderElement;
    }
}
declare namespace LocalJSX {
    interface ButtonGamefinder {
        "disabled"?: boolean;
        "icon"?: string;
        "onGfClick"?: (event: ButtonGamefinderCustomEvent<boolean>) => void;
        "size"?: string;
        "variant"?: string;
    }
    interface CheckboxGamefinder {
        "onGfClick"?: (event: CheckboxGamefinderCustomEvent<boolean>) => void;
    }
    interface ChipGamefinder {
        "color"?: string;
        "onGfClick"?: (event: ChipGamefinderCustomEvent<boolean>) => void;
        "variant"?: string;
    }
    interface DropdownItemGamefinder {
        "color"?: string;
        "disabled"?: boolean;
        "helptext"?: string;
        "icon"?: string;
        "label"?: string;
        "onGfClick"?: (event: DropdownItemGamefinderCustomEvent<boolean>) => void;
        "onValueChange"?: (event: DropdownItemGamefinderCustomEvent<any>) => void;
        "placeholder"?: string;
        "state"?: string;
        "value"?: string;
    }
    interface DropdownListGamefinder {
        "color"?: string;
        "disabled"?: boolean;
        "helptext"?: string;
        "icon"?: string;
        "label"?: string;
        "onGfClick"?: (event: DropdownListGamefinderCustomEvent<boolean>) => void;
        "onValueChange"?: (event: DropdownListGamefinderCustomEvent<any>) => void;
        "placeholder"?: string;
        "state"?: string;
        "value"?: string;
    }
    interface ModalGamefinder {
        "onGfClick"?: (event: ModalGamefinderCustomEvent<boolean>) => void;
        "onModalClosed"?: (event: ModalGamefinderCustomEvent<any>) => void;
        "onModalOpened"?: (event: ModalGamefinderCustomEvent<any>) => void;
        "titleModal"?: string;
        "variant"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface TextfieldGamefinder {
        "color"?: string;
        "disabled"?: boolean;
        "helptext"?: string;
        "icon"?: string;
        "label"?: string;
        "onValueChange"?: (event: TextfieldGamefinderCustomEvent<any>) => void;
        "placeholder"?: string;
        "state"?: string;
        "value"?: string;
    }
    interface IntrinsicElements {
        "button-gamefinder": ButtonGamefinder;
        "checkbox-gamefinder": CheckboxGamefinder;
        "chip-gamefinder": ChipGamefinder;
        "dropdown-item-gamefinder": DropdownItemGamefinder;
        "dropdown-list-gamefinder": DropdownListGamefinder;
        "modal-gamefinder": ModalGamefinder;
        "my-component": MyComponent;
        "textfield-gamefinder": TextfieldGamefinder;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "button-gamefinder": LocalJSX.ButtonGamefinder & JSXBase.HTMLAttributes<HTMLButtonGamefinderElement>;
            "checkbox-gamefinder": LocalJSX.CheckboxGamefinder & JSXBase.HTMLAttributes<HTMLCheckboxGamefinderElement>;
            "chip-gamefinder": LocalJSX.ChipGamefinder & JSXBase.HTMLAttributes<HTMLChipGamefinderElement>;
            "dropdown-item-gamefinder": LocalJSX.DropdownItemGamefinder & JSXBase.HTMLAttributes<HTMLDropdownItemGamefinderElement>;
            "dropdown-list-gamefinder": LocalJSX.DropdownListGamefinder & JSXBase.HTMLAttributes<HTMLDropdownListGamefinderElement>;
            "modal-gamefinder": LocalJSX.ModalGamefinder & JSXBase.HTMLAttributes<HTMLModalGamefinderElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "textfield-gamefinder": LocalJSX.TextfieldGamefinder & JSXBase.HTMLAttributes<HTMLTextfieldGamefinderElement>;
        }
    }
}
